require("dotenv").config();
require("./controllers/database.js");

const Course = require("./models/course.js");
const User = require("./models/user.js");
const cron = require("node-cron");
const punycode = require("punycode");
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
  session,
  Context,
} = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");
const {
  conversations,
  createConversation,
} = require("@grammyjs/conversations");

const bot = new Bot(process.env.BOT_API_TOKEN);

bot.use(session({ initial: () => ({ newsText: null }) }));
bot.use(hydrate());
bot.use(conversations());

const adminIds = process.env.DEV_ADMIN_TOKENS.split(",");

// Check if user is Admin
bot.use(async (ctx, next) => {
  if (adminIds.includes(String(ctx.from.id))) {
    ctx.isAdmin = true;
  }
  await next();
});
//
bot.api.setMyCommands([
  {
    command: "start",
    description: "üõ†Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
  },
  {
    command: "help",
    description: "üìé –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞",
  },
  {
    command: "settings",
    description: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
  },
  {
    command: "channel",
    description: "üíº –ù–∞—à Telegram-–∫–∞–Ω–∞–ª",
  },
  {
    command: "admin",
    description: "üòé –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å",
  },
]);

async function getAllUserIds() {
  try {
    const users = await User.find({}).select("_id");
    const userIds = users.map((user) => user._id);
    return userIds;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    throw error;
  }
}
const permanentKeyboard = new Keyboard()
  .text("üìÉ –ù–æ–≤–æ—Å—Ç–∏")
  .text("üì¢ –ê–Ω–æ–Ω—Å—ã")
  .row()
  .text("üìï –ö—É—Ä—Å—ã")
  .text("‚ùì FAQ")
  .resized();

const inlineKeyboardChannel = new InlineKeyboard().url(
  "–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥-–∫–∞–Ω–∞–ª",
  "https://t.me/ACnMS_PVL"
);
bot.command("start", async (ctx) => {
  try {
    const existingUser = await User.findOne({ userId: ctx.from.id });

    if (!existingUser) {
      const newUser = new User({ userId: ctx.from.id, isAdmin: false });
      await newUser.save();
      await ctx.react("‚ù§");
    }
  } catch (error) {
    console.error(error);
  }

  await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø American Corner Bot üá∫üá∏", {
    parse_mode: "Markdown",
  });

  await new Promise((resolve) => setTimeout(resolve, 700));
  await ctx.reply(
    "‚ÑπÔ∏è –ü–æ–ª—É—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≤–µ–Ω—Ç–∞—Ö, —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ –∞–Ω–æ–Ω—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞!",
    { parse_mode: "Markdown" }
  );

  await new Promise((resolve) => setTimeout(resolve, 700));
  await ctx.reply(
    "üìö –ò–∑—É—á–∞–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –æ–∫—É–Ω–∏—Å—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ê–º–µ—Ä–∏–∫–∏ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¥—Ä—É–≥–∏–º –ª—é–±–∏—Ç–µ–ª—è–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! ü§ù ",
    { parse_mode: "Markdown" }
  );

  await new Promise((resolve) => setTimeout(resolve, 700));
  await ctx.reply(
    "ü´∂ –£–∑–Ω–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫—É—Ä—Å—ã –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ!",
    {
      parse_mode: "Markdown",
    }
  );
  await new Promise((resolve) => setTimeout(resolve, 700));
  await ctx.reply(
    "ü§ì‚òùÔ∏è –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∫—É—Ä—Å–∞—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö —Å —É–≥–æ–ª–∫–∞ üëÄ\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º üëá",

    {
      reply_markup: permanentKeyboard,
    }
  );
});
////
bot.hears("üìÉ –ù–æ–≤–æ—Å—Ç–∏", async (ctx) => {
  await ctx.reply("‚ö° –ß–∏—Ç–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ üëá", {
    reply_markup: inlineKeyboardChannel,
  });
});

bot.hears("üì¢ –ê–Ω–æ–Ω—Å—ã", async (ctx) => {
  await ctx.reply(
    "üì´ –ü–æ–ª—É—á–∏ –ø–µ—Ä–≤—ã–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–æ–Ω—Å–∞—Ö –∏ –Ω–æ–≤—ã—Ö –∏–≤–µ–Ω—Ç–∞—Ö –≤ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ üëá",
    {
      reply_markup: inlineKeyboardChannel,
    }
  );
});

bot.hears("üìï –ö—É—Ä—Å—ã", async (ctx) => {
  await ctx.reply("üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ", {
    reply_markup: menuKeyboard,
  });
});

bot.hears("‚ùì FAQ", async (ctx) => {
  await ctx.reply(
    "<b>Q: –ß—Ç–æ —Ç–∞–∫–æ–µ American Corner Pavlodar?</b>\n" +
      "<i>A: American Corner Pavlodar - —ç—Ç–æ –∫—É–ª—å—Ç—É—Ä–Ω–æ-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –º–µ–∂–¥—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–æ–º –∏ –°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –®—Ç–∞—Ç–∞–º–∏. –ó–¥–µ—Å—å –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤–∫–ª—é—á–∞—è —è–∑—ã–∫–æ–≤—ã–µ –∫—É—Ä—Å—ã, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–º–∏–Ω–∞—Ä—ã –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.</i>\n\n" +
      "<b>Q: –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç American Corner?</b>\n" +
      "<i>A: –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥, –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç—É–ø –∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º, –ø–æ–º–æ—â—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ª–µ–∫—Ü–∏–∏ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ –°–®–ê.</i>\n\n" +
      "<b>Q: –ù—É–∂–Ω–æ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π?</b>\n" +
      "<i>A: –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏–ª–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</i>\n\n" +
      "<b>Q: –ï—Å—Ç—å –ª–∏ –≤ American Corner –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–ª–∏ —á–∏—Ç–∞–ª—å–Ω—ã–π –∑–∞–ª?</b>\n" +
      "<i>A: –î–∞, —É –Ω–∞—Å –µ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å –±–æ–ª—å—à–∏–º –≤—ã–±–æ—Ä–æ–º –∫–Ω–∏–≥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∞ —Ç–∞–∫–∂–µ —É—é—Ç–Ω—ã–π —á–∏—Ç–∞–ª—å–Ω—ã–π –∑–∞–ª, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –∫–Ω–∏–≥–æ–π.</i>\n\n" +
      "<b>Q: –ú–æ–≥—É –ª–∏ —è —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –≤ American Corner?</b>\n" +
      "<i>A: –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –∑–∞—è–≤–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ –∏ —Ç–µ–º, –∫–∞–∫ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–º–æ—á—å.</i>\n\n" +
      "<b>Q: –ö–∞–∫ —è –º–æ–≥—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö American Corner?</b>\n" +
      "<i>A: –ß—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –ø–æ—Å–µ—â–∞–π—Ç–µ –Ω–∞—à —Å–∞–π—Ç. –ú—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.</i>",
    { parse_mode: "HTML" }
  );
});

bot.command("admin", async (ctx) => {
  try {
    const user = await User.findOne({ userId: ctx.from.id });
    if (user && user.isAdmin) {
      await ctx.reply(
        "‚öôÔ∏è –í—ã - –ê–¥–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫—É—Ä—Å–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏",
        {
          reply_markup: adminMenuKeyboard,
        }
      );
    } else {
      await ctx.reply("–í—ã –Ω–µ –∞–¥–º–∏–Ω!");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

const adminMenuKeyboard = new InlineKeyboard()
  .row()
  .text("üî® –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å", "create_course")
  .text("üìõ –û—Ç–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å", "delete_course")
  .row()
  .text("üìë –†–∞–∑–æ—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", "send_news");

bot.use(createConversation(createCourse));

bot.callbackQuery("create_course", async (ctx) => {
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:");
  await ctx.conversation.enter("createCourse");
});

async function createCourse(conversation, ctx) {
  const dayOfWeekCtx = await conversation.waitFor("msg:text");
  const dayOfWeek = dayOfWeekCtx.msg.text;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:");

  const courseNameCtx = await conversation.waitFor("msg:text");
  const courseName = courseNameCtx.msg.text;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∫—É—Ä—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 10:00-12:00:");

  const courseTimeCtx = await conversation.waitFor("msg:text");
  const courseTime = courseTimeCtx.msg.text;

  try {
    const course = new Course({
      title: courseName,
      dayschedule: {
        day: dayOfWeek,
        time: courseTime,
      },
    });

    await course.save();
    await ctx.reply(
      `–ö—É—Ä—Å "${courseName}" –¥–ª—è –¥–Ω—è ${dayOfWeek} –Ω–∞ –≤—Ä–µ–º—è ${courseTime} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}
//
bot.use(createConversation(deleteCourse));
bot.callbackQuery("delete_course", async (ctx) => {
  try {
    const courses = await Course.find({});
    let deleteMessage = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n";
    courses.forEach((course, index) => {
      deleteMessage += `${index + 1}. ${course.title} - ${
        course.dayschedule.day
      } ( ${course.dayschedule.time} )\n`;
    });
    await ctx.reply(deleteMessage);
    await ctx.conversation.enter("deleteCourse");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
  await ctx.answerCallbackQuery();
});

async function deleteCourse(conversation, ctx) {
  const courseNumberCtx = await conversation.waitFor("msg:text");

  try {
    const courseNumber = parseInt(courseNumberCtx.msg.text);
    const courses = await Course.find({});

    if (courseNumber > 0 && courseNumber <= courses.length) {
      const deletedCourse = await Course.findByIdAndDelete(
        courses[courseNumber - 1]._id
      );

      await ctx.reply(
        `–ö—É—Ä—Å "${deletedCourse.title}" –¥–ª—è –¥–Ω—è ${deletedCourse.dayschedule.day} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`
      );
    } else {
      await ctx.reply(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}
// Send News

bot.use(createConversation(sendNews));

bot.callbackQuery("send_news", async (ctx) => {
  await ctx.conversation.enter("sendNews");
});

async function sendNews(conversation, ctx) {
  try {
    await ctx.reply(
      "‚úçÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏? –í–≤–µ–¥–∏—Ç–µ 1, –µ—Å–ª–∏ –¥–∞, –∏–ª–∏ 2, –µ—Å–ª–∏ –Ω–µ—Ç:"
    );
    const imageChoiceResponse = await conversation.wait();
    const imageChoice = imageChoiceResponse.message?.text;

    let photoIds = [];

    if (imageChoice === "1") {
      await ctx.reply(
        "ü§ó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'."
      );

      while (true) {
        const imageResponse = await conversation.wait();
        if (imageResponse.message?.text?.toLowerCase() === "–≥–æ—Ç–æ–≤–æ") break;

        const photo = imageResponse.message?.photo;
        if (photo && photo.length > 0) {
          const photoId = photo[photo.length - 1].file_id;
          photoIds.push(photoId);
        } else {
          await ctx.reply(
            "ü§ó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ', –µ—Å–ª–∏ –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
          );
        }
      }
    } else if (imageChoice !== "2") {
      await ctx.reply("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
      return;
    }

    await ctx.reply("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:");
    const textResponse = await conversation.wait();
    const newsText = textResponse.message?.text;

    if (!newsText) {
      await ctx.reply("‚õîÔ∏è –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
      return;
    }

    if (photoIds.length > 0) {
      const media = photoIds.map((photoId) => ({
        type: "photo",
        media: photoId,
      }));

      media[0].caption = newsText;
      await bot.api.sendMediaGroup(ctx.chat.id, media);
    } else {
      await ctx.reply(newsText);
    }

    await ctx.reply(
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)?`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –î–∞", callback_data: "confirm" }],
            [{ text: "‚ùå –ù–µ—Ç", callback_data: "cancel" }],
          ],
        },
      }
    );

    const confirmationResponse = await conversation.waitFor(
      "callback_query:data"
    );
    const confirmation = confirmationResponse.callbackQuery?.data;

    if (confirmation === "confirm") {
      await ctx.reply("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");

      const users = await User.find({});

      for (const user of users) {
        try {
          if (photoIds.length > 0) {
            const media = photoIds.map((photoId) => ({
              type: "photo",
              media: photoId,
            }));
            media[0].caption = newsText;
            await bot.api.sendMediaGroup(user.userId, media);
          } else {
            await bot.api.sendMessage(user.userId, newsText);
          }
        } catch (error) {
          console.error(`Error sending message to user ${user.userId}`, error);
        }
      }
    } else {
      await ctx.reply("üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    }
  } catch (error) {
    console.error("Error while handling update", error);
    await ctx.reply(
      "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∫—Ç–æ-—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –µ–º—É –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞. –û—Å—Ç–∞–ª—å–Ω—ã–º –ª—é–¥—è–º —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞."
    );
  }
}

// Settings
const settingsKeyboard = new InlineKeyboard()
  .text("üîí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º ID", "id_info")
  .row();

const backToMenu = new InlineKeyboard().text("üîô –ú–µ–Ω—é", "back_to_menu");

bot.command("settings", async (ctx) => {
  await ctx.reply("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", {
    reply_markup: settingsKeyboard,
  });
});

bot.callbackQuery("id_info", async (ctx) => {
  await ctx.answerCallbackQuery();
  try {
    const user = await User.findOne({ userId: ctx.from.id });
    if (user) {
      await ctx.editMessageText(`–í–∞—à ID: ${user.userId}`, {
        reply_markup: backToMenu,
      });
    } else {
      await ctx.editMessageText("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", {
        reply_markup: backToMenu,
      });
    }
  } catch (error) {
    console.error(error);
    await ctx.editMessageText("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID.", {
      reply_markup: backToMenu,
    });
  }
});

bot.callbackQuery("back_to_menu", async (ctx) => {
  await ctx.editMessageText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ", {
    reply_markup: settingsKeyboard,
  });
});
//
const menuKeyboard = new InlineKeyboard()
  .text("üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å", "cources-today")
  .row()
  .text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", "schedule");

const backKeyboard = new InlineKeyboard().text(" ‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async (ctx) => {
  await ctx.reply("üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ", {
    reply_markup: menuKeyboard,
  });
});

bot.callbackQuery("faq", async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.editMessageText("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è FAQ.");
});

bot.callbackQuery("courses", async (ctx) => {
  await ctx.reply("üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ", {
    reply_markup: menuKeyboard,
  });
});

function getCurrentDay() {
  const days = [
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–í—Ç–æ—Ä–Ω–∏–∫",
    "–°—Ä–µ–¥–∞",
    "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ü—è—Ç–Ω–∏—Ü–∞",
    "–°—É–±–±–æ—Ç–∞",
  ];
  const currentDay = new Date().getDay();
  return days[currentDay];
}

const emojiArray = [
  "‚úå",
  "üòÇ",
  "üòù",
  "üòÅ",
  "üò±",
  "üëâ",
  "üôå",
  "üî•",
  "üåà",
  "‚òÄ",
  "üéà",
  "üåπ",
  "üéÄ",
  "üìö",
  "üéì",
  "üìñ",
  "üìù",
  "üî¨",
  "üß™",
  "üß¨",
  "üñäÔ∏è",
  "üñãÔ∏è",
  "‚úèÔ∏è",
  "üìê",
  "üìè",
  "‚úÇÔ∏è",
  "üóÇÔ∏è",
  "üìã",
  "üíº",
  "üë©‚Äçüè´",
  "üë®‚Äçüè´",
  "üë©‚Äçüéì",
  "üë®‚Äçüéì",
  "üß†",
  "üí°",
  "‚è∞",
  "üîî",
  "üòÑ",
  "üòú",
  "üòÇ",
  "ü§£",
  "üò°",
  "üëø",
  "üçÄ",
  "üëÄ",
  "üíù",
  "üíô",
  "üëå",
  "‚ù§",
  "üòç",
  "üòâ",
  "üòì",
  "üò≥",
  "üí™",
  "üíñ",
  "üåü",
  "üéâ",
  "üå∫",
  "üé∂",
  "üèÜ",
  "üëΩ",
  "üíò",
  "üëä",
  "üòò",
  "üòú",
  "üòµ",
  "üôè",
  "üëã",
  "üíÉ",
  "üíé",
  "üöÄ",
  "üåô",
  "üéÅ",
  "üåä",
  "üí∞",
];
function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
  return array.splice(index, 1)[0];
}

bot.callbackQuery("schedule", async (ctx) => {
  try {
    const courses = await Course.find({});

    const daysOrder = [
      "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
      "–í—Ç–æ—Ä–Ω–∏–∫",
      "–°—Ä–µ–¥–∞",
      "–ß–µ—Ç–≤–µ—Ä–≥",
      "–ü—è—Ç–Ω–∏—Ü–∞",
      "–°—É–±–±–æ—Ç–∞",
      "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ];
    courses.sort((a, b) => {
      return (
        daysOrder.indexOf(a.dayschedule.day) -
        daysOrder.indexOf(b.dayschedule.day)
      );
    });

    const weekScheduleString = `üéí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é :\n${courses
      .map((course) => {
        const emoji = getRandomElement(emojiArray);
        return `${emoji} ${course.dayschedule.day} - ${course.title} (${course.dayschedule.time})`;
      })
      .join("\n")}`;

    await ctx.callbackQuery.message.editText(weekScheduleString, {
      reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
  }
});

bot.callbackQuery("cources-today", async (ctx) => {
  try {
    const currentDay = getCurrentDay();
    const todayCourses = await Course.find({
      "dayschedule.day": currentDay,
    }).sort("dayschedule.time");

    let dayScheduleString;
    if (!todayCourses || todayCourses.length === 0) {
      dayScheduleString = "üìÜ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∫—É—Ä—Å–æ–≤ üíî";
    } else {
      dayScheduleString = `üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${currentDay}\n${todayCourses
        .map((course) => `${course.title} (${course.dayschedule.time})`)
        .join("\n")}`;
    }

    await ctx.callbackQuery.message.editText(dayScheduleString, {
      reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuery();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.");
  }
});

async function sendToAllUsersDaySchedule(bot) {
  try {
    const currentDay = getCurrentDay();
    const todayCourses = await Course.find({ "dayschedule.day": currentDay });

    console.log("–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫—É—Ä—Å—ã:", todayCourses);

    let dayScheduleString;
    if (!todayCourses || todayCourses.length === 0) {
      dayScheduleString = "üìÜ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∫—É—Ä—Å–æ–≤ üíî";
    } else {
      dayScheduleString = `üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${currentDay}\n${todayCourses
        .map((course) => {
          console.log("–ö—É—Ä—Å:", course);
          return `${course.title} (${course.dayschedule.time})`;
        })
        .join("\n")}`;
    }

    const users = await User.find({});

    for (const user of users) {
      if (user.userId) {
        await bot.api.sendMessage(user.userId, dayScheduleString);
      } else {
        console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å _id ${user._id} –Ω–µ –∏–º–µ–µ—Ç userId.`);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å:", error);
  }
}

async function sendToAllUsersWeekSchedule(bot) {
  try {
    try {
      const courses = await Course.find({});

      const daysOrder = [
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
      ];
      courses.sort((a, b) => {
        return (
          daysOrder.indexOf(a.dayschedule.day) -
          daysOrder.indexOf(b.dayschedule.day)
        );
      });

      const weekScheduleString = `üéí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n${courses
        .map((course) => {
          const emoji = getRandomElement(emojiArray);
          return `${emoji} ${course.dayschedule.day} - ${course.title} (${course.dayschedule.time})`;
        })
        .join("\n")}`;

      const users = await User.find({});

      for (const user of users) {
        if (user.userId) {
          await bot.api.sendMessage(user.userId, weekScheduleString);
        } else {
          console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å _id ${user._id} –Ω–µ –∏–º–µ–µ—Ç userId.`);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:", error);
  }
}
// Newsletter
cron.schedule(
  "0 10 * * *",
  () => {
    console.log("–†–∞—Å—Å—ã–ª–∫–∞ —Å–¥–µ–ª–∞–Ω–∞", new Date());
    sendToAllUsersDaySchedule(bot);
  },
  {
    scheduled: true,
    timezone: "Asia/Almaty",
  }
);

cron.schedule(
  "0 10 */7 * *",
  () => {
    console.log("–†–∞—Å—Å—ã–ª–∫–∞ —Å–¥–µ–ª–∞–Ω–∞", new Date());
    sendToAllUsersWeekSchedule(bot);
  },
  {
    scheduled: true,
    timezone: "Asia/Almaty",
  }
);
//
bot.callbackQuery("back", async (ctx) => {
  await ctx.callbackQuery.message.editText("üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ", {
    reply_markup: menuKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.command("help", async (ctx) => {
  await ctx.reply(
    "ü§ñ –ö–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ : \n /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º \n /channel - TG –∫–∞–Ω–∞–ª American Corner Pavlodar \n /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \n /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n /help - –ø–æ–º–æ—â—å –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ \n"
  );
});

bot.command("channel", async (ctx) => {
  await ctx.reply(
    "üîó –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª American Corner Pavlodar, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π! üëá",
    {
      reply_markup: inlineKeyboardChannel,
    }
  );
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.log(`Error whiile handling update ${ctx.update.update_id}`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error", e);
  }
});

bot.start();
