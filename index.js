require("dotenv").config();

const punycode = require("punycode");

const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
  session,
  Context,
} = require("grammy");

const { hydrate } = require("@grammyjs/hydrate");

const {
  conversations,
  createConversation,
} = require("@grammyjs/conversations");

const emojiArray = [
  "‚úå",
  "üòÇ",
  "üòù",
  "üòÅ",
  "üò±",
  "üëâ",
  "üôå",
  "üçª",
  "üî•",
  "üåà",
  "‚òÄ",
  "üéà",
  "üåπ",
  "üíÑ",
  "üéÄ",
  "‚öΩ",
  "üéæ",
  "üèÅ",
  "üò°",
  "üëø",
  "üêª",
  "üê∂",
  "üê¨",
  "üêü",
  "üçÄ",
  "üëÄ",
  "üöó",
  "üçé",
  "üíù",
  "üíô",
  "üëå",
  "‚ù§",
  "üòç",
  "üòâ",
  "üòì",
  "üò≥",
  "üí™",
  "üí©",
  "üç∏",
  "üîë",
  "üíñ",
  "üåü",
  "üéâ",
  "üå∫",
  "üé∂",
  "üë†",
  "üèà",
  "‚öæ",
  "üèÜ",
  "üëΩ",
  "üíÄ",
  "üêµ",
  "üêÆ",
  "üê©",
  "üêé",
  "üí£",
  "üëÉ",
  "üëÇ",
  "üçì",
  "üíò",
  "üíú",
  "üëä",
  "üíã",
  "üòò",
  "üòú",
  "üòµ",
  "üôè",
  "üëã",
  "üöΩ",
  "üíÉ",
  "üíé",
  "üöÄ",
  "üåô",
  "üéÅ",
  "‚õÑ",
  "üåä",
  "‚õµ",
  "üèÄ",
  "üé±",
  "üí∞",
  "üë∂",
  "üë∏",
  "üê∞",
  "üê∑",
  "üêç",
  "üê´",
  "üî´",
  "üëÑ",
  "üö≤",
  "üçâ",
  "üíõ",
  "üíö",
];

const bot = new Bot(process.env.BOT_API_TOKEN);

bot.use(
  session({
    initial() {
      // return empty object for now
      return {};
    },
  })
);
bot.use(hydrate());
bot.use(conversations());

const adminId = 661659768;

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

const randomEmoji = getRandomElement(emojiArray);

let daySchedule = [
  {
    name: "English Course",
  },
];
let weekSchedule = [
  {
    day: "Monday",
    course: "English Course",
  },
  {
    day: "Tuesday",
    course: "A.I Course",
  },
];

// Check if user is Admin

bot.use(async (ctx, next) => {
  if (ctx.from.id === adminId) {
    ctx.isAdmin = true;
  }
  await next();
});

//

bot.api.setMyCommands([
  {
    command: "start",
    description: "Start a bot",
  },
  {
    command: "help",
    description: "Get help",
  },
  {
    command: "menu",
    description: "Menu",
  },
  {
    command: "id",
    description: "Provide your ID",
  },
  {
    command: "channel",
    description: "Our announcements channel",
  },
]);

// start
bot.command("start", async (ctx) => {
  await ctx.react("‚ù§");

  if (ctx.isAdmin) {
    await ctx.reply(
      "‚öôÔ∏è –í—ã - –ê–¥–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫—É—Ä—Å–∞–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏",
      {
        reply_markup: adminMenuKeyboard,
      }
    );
  } else {
    // Send the first message
    await ctx.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç American Corner", {
      parse_mode: "Markdown",
    });

    // Send the second message with a delay
    await new Promise((resolve) => setTimeout(resolve, 700)); // Adjust delay as needed
    await ctx.reply(
      "‚ÑπÔ∏è –ü–æ–ª—É—á–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≤–µ–Ω—Ç–∞—Ö, —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–æ–Ω—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞!",
      { parse_mode: "Markdown" }
    );

    // Send the third message with another delay
    await new Promise((resolve) => setTimeout(resolve, 700)); // Adjust delay as needed
    await ctx.reply(
      "üìö –ò–∑—É—á–∞–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –æ–∫—É–Ω–∏—Å—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ê–º–µ—Ä–∏–∫–∏ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¥—Ä—É–≥–∏–º –ª—é–±–∏—Ç–µ–ª—è–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! ü§ù ",
      { parse_mode: "Markdown" }
    );

    // Send the fourth message with another delay
    await new Promise((resolve) => setTimeout(resolve, 700)); // Adjust delay as needed
    await ctx.reply(
      "‚ùì –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è —á—Ç–æ —É–≥–æ–¥–Ω–æ –ø—Ä–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫—É—Ä—Å—ã –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ!",
      {
        parse_mode: "Markdown",
      }
    );
  }
});

////

// admin panel

const adminMenuKeyboard = new InlineKeyboard()
  .row()
  .text("üî® –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å", "create_course")
  .text("üìõ –û—Ç–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å", "delete_course")
  .row()
  .text("üìë –†–∞–∑–æ—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å", "send_news");

// Add course

let messageListenerActive = false;

let courses = [];

const messageListener = async (ctx) => {
  if (!messageListenerActive) return; // –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω

  try {
    if (ctx.session.state === "waiting_for_day") {
      const dayOfWeek = ctx.message.text;
      ctx.session.newCourse = { day: dayOfWeek };
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:");
      ctx.session.state = "waiting_for_course";
    } else if (ctx.session.state === "waiting_for_course") {
      const courseName = ctx.message.text;
      ctx.session.newCourse.course = courseName;
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫—É—Ä—Å–∞:");
      ctx.session.state = "waiting_for_time";
    } else if (ctx.session.state === "waiting_for_time") {
      const courseTime = ctx.message.text;
      const newCourse = {
        day: ctx.session.newCourse.day,
        course: ctx.session.newCourse.course,
        time: courseTime,
      };
      courses.push(newCourse);
      await ctx.reply(
        `–ö—É—Ä—Å "${ctx.session.newCourse.course}" –¥–ª—è –¥–Ω—è ${ctx.session.newCourse.day} –Ω–∞ –≤—Ä–µ–º—è ${courseTime} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`
      );
      delete ctx.session.newCourse;
      delete ctx.session.state;
      messageListenerActive = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
};

bot.use((ctx, next) => {
  if (messageListenerActive) {
    return messageListener(ctx);
  } else {
    return next();
  }
});

bot.callbackQuery("create_course", async (ctx) => {
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:");
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
  ctx.session.state = "waiting_for_day";
  messageListenerActive = true;
});
///////

bot.use(createConversation(deleteCourse));

bot.callbackQuery("delete_course", async (ctx) => {
  try {
    let deleteMessage = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n";
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä—Å–æ–≤ —Å –∏—Ö –Ω–æ–º–µ—Ä–∞–º–∏
    courses.forEach((course, index) => {
      deleteMessage += `${index + 1}. ${course.course} - ${course.day}\n`;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await ctx.reply(deleteMessage);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
    await ctx.conversation.enter("deleteCourse");
    // await deleteCourse(conversation, ctx);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
  await ctx.answerCallbackQuery();
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
async function deleteCourse(conversation, ctx) {
  // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const courseNumberCtx = await conversation.waitFor("msg:text");

  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∏—Å–ª–æ
    const courseNumber = parseInt(courseNumberCtx.msg.text);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫—É—Ä—Å–∞
    if (courseNumber > 0 && courseNumber <= courses.length) {
      // –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ courses
      const deletedCourse = courses.splice(courseNumber - 1, 1);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞
      await ctx.reply(
        `–ö—É—Ä—Å "${deletedCourse[0].course}" –¥–ª—è –¥–Ω—è ${deletedCourse[0].day} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`
      );
    } else {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞
      await ctx.reply(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
      );
    }
  } catch (error) {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

//
// Send News

bot.use(createConversation(sendNews));

bot.callbackQuery("send_news", async (ctx) => {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
    await ctx.reply(
      "–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:"
    );

    await ctx.conversation.enter("sendNews");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

const publishKeyboard = new InlineKeyboard()
  .text("‚úÖ –î–∞, –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "confirm_publish")
  .row()
  .text("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_publish");

const readyKeyboard = new InlineKeyboard().text("‚úÖ –ì–æ—Ç–æ–≤–æ", "ready");

bot.callbackQuery("ready", async (ctx) => {
  await ctx.callbackQuery.message.editText("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–∞", {
    reply_markup: readyKeyboard,
  });

  await ctx.reply("–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.");
  await ctx.answerCallbackQuery();
});

async function sendNews(conversation, ctx) {
  const newsTextCtx = await conversation.waitFor("msg:text");

  // Get the news text from the context
  const newsText = newsTextCtx.msg.text;

  // Reply with the news text and ask for confirmation
  await ctx.reply(
    `–í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å: "${newsText}"\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—ë?`,
    {
      reply_markup: publishKeyboard,
    }
  );

  try {
    // Here you can implement the logic to actually publish the news to users
  } catch (error) {
    // Handle error if occurred while sending news
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

bot.callbackQuery("cancel_publish", async (ctx) => {
  await ctx.reply("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
});
bot.callbackQuery("confirm_publish", async (ctx) => {
  try {
    // –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    const newsText = ctx.callbackQuery.message.text.split(": ")[1]; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    try {
      await ctx.reply("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.");
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:`, error);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–∏
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

//

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π

bot.command("panel", async (ctx) => {
  // const panelKeyobardLabels = ["üìÉ –ù–æ–≤–æ—Å—Ç–∏", "üì¢ –ê–Ω–æ–Ω—Å—ã", "üìï –ö—É—Ä—Å—ã", "‚ùì FAQ"];

  // const rows = panelKeyobardLabels.map((label) => {
  //   return [Keyboard.text(label)];
  // });

  const panelKeyboard = new Keyboard()
    .text("üìÉ –ù–æ–≤–æ—Å—Ç–∏", "news")
    .text("üì¢ –ê–Ω–æ–Ω—Å—ã", "announcements")
    .row()
    .text("üìï –ö—É—Ä—Å—ã", "courses")
    .text("‚ùì FAQ", "faq")
    .resized();

  await ctx.reply(
    "üëÄ –ü—Ä–∏–≤–µ—Ç! –Ø American Corner Bot üá∫üá∏\nüìÅ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∫—É—Ä—Å–∞—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö —Å —É–≥–æ–ª–∫–∞\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º üëá",
    {
      reply_markup: panelKeyboard,
    }
  );
});

// menu keyboard

const menuKeyboard = new InlineKeyboard()
  .text("üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å", "cources-today")
  .row()
  .text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", "schedule");

const backKeyboard = new InlineKeyboard().text(" ‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async (ctx) => {
  if (
    ctx.session.state &&
    (ctx.session.state === "waiting_for_day" ||
      ctx.session.state === "waiting_for_course")
  ) {
    return;
  } else {
    await ctx.reply("üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é : ", {
      reply_markup: menuKeyboard,
    });
  }
});

bot.callbackQuery("schedule", async (ctx) => {
  const weekScheduleString = `üéí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n${courses
    .map((item) => `${item.day} - ${item.course} (${item.time})`)
    .join("\n")}`;

  await ctx.callbackQuery.message.editText(weekScheduleString, {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});
bot.callbackQuery("cources-today", async (ctx) => {
  await ctx.callbackQuery.message.editText(
    `üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å\n ${daySchedule.course}`,
    {
      reply_markup: backKeyboard,
    }
  );
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("back", async (ctx) => {
  await ctx.callbackQuery.message.editText("üëã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é : ", {
    reply_markup: menuKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.hears("news", async (ctx) => {
  await ctx.reply("–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π! :");
  await new Promise((resolve) => setTimeout(resolve, 300));
  await ctx.reply(
    "Don't miss out! Join our Telegram channel now for limited-time offers and community events."
  );
});
bot.command("help", async (ctx) => {
  if (
    ctx.session.state &&
    (ctx.session.state === "waiting_for_day" ||
      ctx.session.state === "waiting_for_course")
  ) {
    return; // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
  }
  await ctx.reply(
    "ü§ñ –ö–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ : \n /channel - Telegram –∫–∞–Ω–∞–ª American Corner Pavlodar \n /id - –≤–∞—à ID \n /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n /start - –Ω–∞—á–∞—Ç—å –±–æ—Ç–∞ \n /help - –ø–æ–º–æ—â—å"
  );
});
bot.command("id", async (ctx) => {
  if (
    ctx.session.state &&
    (ctx.session.state === "waiting_for_day" ||
      ctx.session.state === "waiting_for_course")
  ) {
    return;
  }
  await ctx.reply(`Your ID : ${ctx.from.id}`);
});

bot.command("channel", async (ctx) => {
  if (
    ctx.session.state &&
    (ctx.session.state === "waiting_for_day" ||
      ctx.session.state === "waiting_for_course")
  ) {
    return;
  }
  const inlineKeyboardChannel = new InlineKeyboard().url(
    "–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥-–∫–∞–Ω–∞–ª",
    "https://t.me/ACnMS_PVL"
  );
  await ctx.reply(
    "üîó –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª American Corner Pavlodar, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π! üëá",
    {
      reply_markup: inlineKeyboardChannel,
    }
  );
});

bot.on([":media", "::url"], async (ctx) => {
  await ctx.reply("Got a URL");
});

// bot.on("msg").filter(
//   (ctx) => {
//     return ctx.from.id === 661659768;
//   },
//   async (ctx) => {
//     ctx.reply("Admin");
//   }
// );
// bot.on(":photo").on("::hashtag", () => {});
// bot.command(["say_hello", "hello", "hi"], async (ctx) => {
//     await ctx.reply("Hi");
//   });

// error listener

bot.catch((err) => {
  const ctx = err.ctx;
  console.log(`Error whiile handling update ${ctx.update.update_id}`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("Error in request : ", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram :", e);
  } else {
    console.error("Unknown error", e);
  }
});

bot.start();
